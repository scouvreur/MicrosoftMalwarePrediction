'''
|=======================================================|
|                                                       |
| This program implements functions to import data from |
| the Microsoft Malware Prediction challenge in Kaggle, |
| visualize results, train a model and submit           |
| predictions                                           |
|                                                       |
|=======================================================|
'''

print(__doc__)

import json

import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
from xgboost.sklearn import XGBClassifier

def load_data():
    '''
    This function loads the training and testing
    data into memory, using data types specified
    in json schema file
    '''
    with open('data/dtypes.json') as f:
        dtypes = json.load(f)

    train = pd.read_csv("data/train.csv", dtype=dtypes, nrows=100)
    test = pd.read_csv("data/test.csv", dtype=dtypes, nrows=100)

    print("--- Data read in successfully ---")
    return train, test, dtypes

train, test, dtypes = load_data()

def split_data(train_df, test_df, valid_set_size=0.33):
    """
    This function takes in train and test pandas dataframe
    objects and a percentage validation set size and returns
    data and label arrays for train, validation and a data array
    for test
    """
    binary_features = []
    categorical_features = []
    numerical_features = []

    X_train = train_df.iloc[:, 1:-1]
    X_test = test_df.iloc[:, 1:]

    for key, value in dtypes.items():
        if value in ['int8']:
            binary_features.append(key)
        if value in ['int16','category']:
            categorical_features.append(key)
        else:
            numerical_features.append(key)

    categorical_features.remove('MachineIdentifier')

    X_train = X_train.drop(columns=list(categorical_features)).values
    X_test = X_test.drop(columns=list(categorical_features)).values
    Y_train = train_df['HasDetections'].values

    X_train, X_validation, Y_train, Y_validation = train_test_split(
        X_train, Y_train, test_size=valid_set_size, random_state=777)
    return X_train, X_validation, X_test, Y_train, Y_validation

X_train, X_validation, X_test, Y_train, Y_validation = split_data(train_df=train, test_df=test, valid_set_size=0.33)

def train_model(X_train, Y_train):
    """
    This function takes in the training data and label arrays
    and returns a clf classifier object
    """
    n_estimators = 400
    max_depth = 5
    min_child_weight = 5
    learning_rate = 0.1

    clf = XGBClassifier(n_estimators=n_estimators,
                    max_depth=max_depth,
                    min_child_weight=min_child_weight,
                    learning_rate=learning_rate)
    clf.fit(X_train, Y_train)
    return clf

clf = train_model(X_train=X_train, Y_train=Y_train)

Y_test = clf.predict(X_test)
Y_test_proba = clf.predict_proba(X_test)[:, 1]

print("=====================  Model parameters  =====================")
print(clf)

print("=====================  Validation set  =======================")
print("AUROC = {}".format(roc_auc_score(Y_validation,
                                        clf.predict_proba(X_validation)[:,1])))

print("======================  Training set  ========================")
print("AUROC = {}".format(roc_auc_score(Y_train,
                                        clf.predict_proba(X_train)[:,1])))

print("==============================================================")

def print_predictions(test, preds):
    """
    This function takes in the array of predictions and prediction
    probabilities and prints them to stdout
    """
    print("MachineIdentifier,HasDetections")
    for i in range(0,test.shape[0]):
      print("{},{:6f}".format(test.iloc[i,0],preds[i]))

def save_submission(subm_path, test, preds):
    """
    This fuction takes in the test set, its predictions and prediction
    probabilities and saves them to a file in data/submission.csv
    """
    submission = open(subm_path, 'w')
    submission.write("MachineIdentifier,HasDetections\n")
    for i in range(0,test.shape[0]):
        submission.write("{},{:6f}\n".format(test.iloc[i,1],preds[i]))
    submission.close()

print_predictions(test=test, preds=Y_test_proba)
save_submission(subm_path="data/submission.csv", test=test, preds=Y_test_proba)
